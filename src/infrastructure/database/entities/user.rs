//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::discord::Entity",
        from = "Column::Id",
        to = "super::discord::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Discord,
    #[sea_orm(has_many = "super::guild_user::Entity")]
    GuildUser,
    #[sea_orm(has_many = "super::queue_user::Entity")]
    QueueUser,
    #[sea_orm(has_many = "super::user_team::Entity")]
    UserTeam,
}

impl Related<super::discord::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Discord.def()
    }
}

impl Related<super::guild_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GuildUser.def()
    }
}

impl Related<super::queue_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QueueUser.def()
    }
}

impl Related<super::user_team::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserTeam.def()
    }
}

impl Related<super::guild::Entity> for Entity {
    fn to() -> RelationDef {
        super::guild_user::Relation::Guild.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::guild_user::Relation::User.def().rev())
    }
}

impl Related<super::queue::Entity> for Entity {
    fn to() -> RelationDef {
        super::queue_user::Relation::Queue.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::queue_user::Relation::User.def().rev())
    }
}

impl Related<super::team::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_team::Relation::Team.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_team::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
