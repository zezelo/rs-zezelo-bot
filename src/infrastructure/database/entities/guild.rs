//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "guild")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: String,
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::game::Entity")]
    Game,
    #[sea_orm(has_many = "super::guild_user::Entity")]
    GuildUser,
    #[sea_orm(has_one = "super::queue::Entity")]
    Queue,
}

impl Related<super::game::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Game.def()
    }
}

impl Related<super::guild_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GuildUser.def()
    }
}

impl Related<super::queue::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Queue.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::guild_user::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::guild_user::Relation::Guild.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
